/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.somi92.seecsk.gui;

import com.github.somi92.seecsk.data.Sesija;
import com.github.somi92.seecsk.server.ServerInstance;
import com.github.somi92.seecskcommon.domain.Clan;
import com.github.somi92.seecskcommon.domain.Grupa;
import com.github.somi92.seecskcommon.domain.Prisustvo;
import com.github.somi92.seecskcommon.domain.Trening;
import com.github.somi92.seecskcommon.transfer.OdgovorObjekat;
import com.github.somi92.seecskcommon.transfer.ZahtevObjekat;
import com.github.somi92.seecskcommon.util.Ref;
import com.github.somi92.seecskcommon.util.SistemskeOperacije;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author milos
 */
public class FNewTraining extends javax.swing.JDialog {

    private Grupa grupa;
    private Trening trening;
    private boolean update;
    
    /**
     * Creates new form FNewTraining
     */
    public FNewTraining(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        grupa = (Grupa) Sesija.vratiInstancu().vratiMapuSesije().get(Sesija.GRUPA);
        trening = (Trening) Sesija.vratiInstancu().vratiMapuSesije().get(Sesija.TRENING);
        Sesija.vratiInstancu().vratiMapuSesije().put(Sesija.GRUPA, null);
        Sesija.vratiInstancu().vratiMapuSesije().put(Sesija.TRENING, null);
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jdccDatum = new datechooser.beans.DateChooserCombo();
        jspnTime = new javax.swing.JSpinner();
        jspnDuration = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxtDesc = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jbtnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dodaj novi trening");

        jLabel1.setText("Datum:");

        jLabel2.setText("Trajanje (min):");

        jLabel3.setText("Opis treninga:");

        jdccDatum.setFormat(2);
        jdccDatum.setLocale(new java.util.Locale("sr", "BA", ""));

        jspnTime.setModel(new javax.swing.SpinnerDateModel());

        jspnDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 360, 15));

        jtxtDesc.setColumns(20);
        jtxtDesc.setLineWrap(true);
        jtxtDesc.setRows(5);
        jtxtDesc.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jtxtDesc);

        jLabel4.setText("Vreme:");

        jbtnSave.setText("Sačuvaj");
        jbtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jspnDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jdccDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jspnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jdccDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jspnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jspnDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed
        Date tempDate = (Date) jspnTime.getValue();
        Calendar tempCal = Calendar.getInstance();
        tempCal.setTime(tempDate);
        
        Calendar c = jdccDatum.getSelectedDate();
        c.set(Calendar.HOUR_OF_DAY, tempCal.get(Calendar.HOUR_OF_DAY));
        c.set(Calendar.MINUTE, tempCal.get(Calendar.MINUTE));
        
        Date datum = new Date(c.getTimeInMillis());
        int trajanjeMin = Integer.parseInt(jspnDuration.getValue().toString());
        String opis = jtxtDesc.getText().trim();
        
        if(!update) {
            trening = new Trening();
            trening.setGrupa(grupa);
            Ref<Trening> treningRef = new Ref(trening);
            
            ZahtevObjekat zo = new ZahtevObjekat();
            zo.setSistemskaOperacija(SistemskeOperacije.SO_KREIRAJ_TRENING);
            zo.setParametar(treningRef);
            ServerInstance.vratiInstancu().posaljiZahtev(zo);
            OdgovorObjekat oo = ServerInstance.vratiInstancu().vratiOdgovor();
            treningRef = oo.getPodaci();
//            KontrolerPL.kreirajTrening(treningRef);
            trening = treningRef.get();
        }
        trening.setDatumVreme(datum);
        trening.setTrajanjeMin(trajanjeMin);
        trening.setOpisTreninga(opis);
//        if(!update) {
//            initAttendance();
//        }
        
        Trening t = new Trening();
        t.setIdTrening(trening.getIdTrening());
        t.setDatumVreme(datum);
        t.setTrajanjeMin(trajanjeMin);
        t.setOpisTreninga(opis);
        t.setGrupa(grupa);
        if(!update) {
            initAttendance();
            t.setPrisustva(trening.getPrisustva());
        }
        ZahtevObjekat zo = new ZahtevObjekat();
        zo.setSistemskaOperacija(SistemskeOperacije.SO_ZAPAMTI_TRENING);
        zo.setParametar(t);
        ServerInstance.vratiInstancu().posaljiZahtev(zo);
        OdgovorObjekat oo = ServerInstance.vratiInstancu().vratiOdgovor();
        if(oo.getStatusOperacije()==0) {
            JOptionPane.showMessageDialog(this, "Trening je uspešno sačuvan.");
        } else {
            JOptionPane.showMessageDialog(this, "Greška! Trening nije uspešno sačuvan!");
        }
//        KontrolerPL.sacuvajIliAzurirajTrening(trening);
        dispose();
    }//GEN-LAST:event_jbtnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnSave;
    private datechooser.beans.DateChooserCombo jdccDatum;
    private javax.swing.JSpinner jspnDuration;
    private javax.swing.JSpinner jspnTime;
    private javax.swing.JTextArea jtxtDesc;
    // End of variables declaration//GEN-END:variables

    private void initForm() {
        
        SpinnerDateModel sdm = new SpinnerDateModel();
        sdm.setCalendarField(Calendar.MINUTE);
        jspnTime.setModel(sdm);
        jspnTime.setEditor(new JSpinner.DateEditor(jspnTime, "HH:mm"));
        
        if(trening == null) {
            setTitle(grupa.getNaziv()+" - novi trening");
            update = false;
        } else {
            setTitle(grupa.getNaziv()+" - izmena treninga");
            update = true;
            jspnTime.setValue(trening.getDatumVreme());
            Calendar c = Calendar.getInstance();
            c.setTime(trening.getDatumVreme());
            jdccDatum.setSelectedDate(c);
            jspnDuration.setValue(trening.getTrajanjeMin());
            jtxtDesc.setText(trening.getOpisTreninga());
        }
    }
    
    private void initAttendance() {
        List<Clan> clanovi = new ArrayList<>();
        Clan clan = new Clan();
        clan.setGrupa(grupa);
        clanovi.add(clan);
        Ref<List<Clan>> clanoviRef = new Ref(clanovi);
        List<String> kriterijumPretrage = new ArrayList<>();
        kriterijumPretrage.add("grupa");
        
        ZahtevObjekat zo = new ZahtevObjekat();
        zo.setSistemskaOperacija(SistemskeOperacije.SO_PRONADJI_CLANOVE);
        zo.setKriterijumPretrage(kriterijumPretrage);
        zo.setUcitajListe(false);
        zo.setParametar(clanoviRef);
        ServerInstance.vratiInstancu().posaljiZahtev(zo);
        OdgovorObjekat oo = ServerInstance.vratiInstancu().vratiOdgovor();
        clanoviRef = oo.getPodaci();
//        KontrolerPL.pronadjiClanove(clanoviRef, kriterijumPretrage, false);
        clanovi = clanoviRef.get();
        
        ArrayList<Prisustvo> prisustva = new ArrayList<>();
        for(Clan c : clanovi) {
            Prisustvo p = new Prisustvo(true, 0, trening, c);
            prisustva.add(p);
        }
        trening.setPrisustva(prisustva);
    }
}
